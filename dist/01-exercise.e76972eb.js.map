{"version":3,"sources":["src/utils/utils.js","src/01-exercise/01-exercise-setup.js","src/01-exercise/01-exercise.js"],"names":["isFunction","fn","isArrowFunction","isAsyncFunction","Object","prototype","toString","call","includes","setup01Exercise","exercise01","a","b","console","log","undefined"],"mappings":";;;;;;;ACAA,ACuBA;;ADrBA,ADFO,SCEES,ADFOT,UAAT,CAAoBC,EAApB,ECEP,ADF+B,CCENS,UAAzB,EAAqC;AACjC,ADFA,MCEI,GDFG,OAAOT,EAAP,KAAc,MCENS,IDFf,MCEI,CAAJ,EAA4B;AACxBA,ACJR,AFEC,ICEOA,UAAU;AACb;AACJ,ADFM,SAASR,eAAT,CAAyBD,EAAzB,EAA6B;AAChC,MAAIA,EAAJ;AACH,eCEcQ;;ADAR,SAASN,eAAT,CAAyBF,EAAzB,EAA6B;AAChC,SAAOG,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BN,EAA/B,EAAmCO,QAAnC,CAA4C,eAA5C,CAAP;AACH;;;;;;;;AEOD;AACA,SAASE,UAAT,GAAkC;AAAA,MAAdC,CAAc,uEAAV,CAAU;AAAA,MAAPC,CAAO,uEAAH,CAAG;AAC9B,SAAOD,CAAC,GAAGC,CAAX;AACH,EAED;;;AAGA,IAAI,kBAAyB,MAA7B,EAAqC;AACjC,8BAAgB,MAAMC,OAAO,CAACC,GAAR,CAAYJ,UAAU,EAAtB,CAAtB;AACA,8BAAgB,MAAMG,OAAO,CAACC,GAAR,CAAYJ,UAAU,CAAC,CAAD,CAAtB,CAAtB;AACA,8BAAgB,MAAMG,OAAO,CAACC,GAAR,CAAYJ,UAAU,CAACK,SAAD,EAAY,CAAZ,CAAtB,CAAtB;AACH;;eAEcL","file":"01-exercise.e76972eb.js","sourceRoot":"..","sourcesContent":["export function isFunction(fn) {\n    return typeof fn === \"function\";\n}\n\nexport function isArrowFunction(fn) {\n    new fn();\n}\n\nexport function isAsyncFunction(fn) {\n    return Object.prototype.toString.call(fn).includes(\"AsyncFunction\");\n}\n","import { isFunction } from \"../utils/utils\";\n\nfunction setup01Exercise(exercise01) {\n    if (isFunction(exercise01)) {\n        exercise01();\n    }\n}\n\nexport default setup01Exercise;\n","/**\n * Exercise 01:\n *\n * Finish the code of the `exercise01` function\n * so that it:\n *\n * 1. Receives a parameter named `a` that has a default value of 1\n *\n * 2. Receives a parameter named `b` that has a default value of 1\n *\n * 3. Returns the multiplication of the `a` and `b` parameters\n *\n * The function should have default values for each parameter\n * so that if it is called without a value for each one of them\n * it picks up the default value.\n */\n\n// Finish the code of the function\nfunction exercise01(a = 1, b = 1) {\n    return a * b\n}\n\n// Donâ€™t change the code bellow this line\nimport setup01Exercise from \"./01-exercise-setup\";\n\nif (process.env.NODE_ENV !== \"test\") {\n    setup01Exercise(() => console.log(exercise01()));\n    setup01Exercise(() => console.log(exercise01(5)));\n    setup01Exercise(() => console.log(exercise01(undefined, 2)));\n}\n\nexport default exercise01;\n"]}