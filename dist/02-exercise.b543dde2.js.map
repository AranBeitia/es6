{"version":3,"sources":["src/utils/utils.js","src/02-exercise/02-exercise-setup.js","src/02-exercise/02-exercise.js"],"names":["isFunction","fn","isArrowFunction","isAsyncFunction","Object","prototype","toString","call","includes","setup02Exercise","exercise02","firstName","lastName","console","log"],"mappings":";;;;;;;ACAA,ACgDA;;AD9CA,ADFO,SCEES,ADFOT,UAAT,CAAoBC,EAApB,ECEP,ADF+B,CCENS,UAAzB,EAAqC;AACjC,ADFA,MCEI,GDFG,OAAOT,EAAP,KAAc,MCENS,IDFf,MCEI,CAAJ,EAA4B;AACxBA,ACJR,AFEC,ICEOA,UAAU;AACb;AACJ,ADFM,SAASR,eAAT,CAAyBD,EAAzB,EAA6B;AAChC,MAAIA,EAAJ;AACH,eCEcQ;;ADAR,SAASN,eAAT,CAAyBF,EAAzB,EAA6B;AAChC,SAAOG,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BN,EAA/B,EAAmCO,QAAnC,CAA4C,eAA5C,CAAP;AACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEgCD;AACA,SAASE,UAAT,OAAwF;AAAA,MAAnE;AAACC,IAAAA,SAAS,GAAG,mBAAb;AAAkCC,IAAAA,QAAQ,GAAG;AAA7C,GAAmE;AACtF,8BAAqBD,SAArB,cAAkCC,QAAlC;AACD,EAED;;;AAGA,IAAI,kBAAyB,MAA7B,EAAqC;AACpC,8BAAgB,MACfC,OAAO,CAACC,GAAR,CACCJ,UAAU,CAAC;AACVC,IAAAA,SAAS,EAAE,MADD;AAEVC,IAAAA,QAAQ,EAAE;AAFA,GAAD,CADX,CADD;AAQA,8BAAgB,MAAMC,OAAO,CAACC,GAAR,CAAYJ,UAAU,CAAC,EAAD,CAAtB,CAAtB;AACA;;eAEcA","file":"02-exercise.b543dde2.js","sourceRoot":"..","sourcesContent":["export function isFunction(fn) {\n    return typeof fn === \"function\";\n}\n\nexport function isArrowFunction(fn) {\n    new fn();\n}\n\nexport function isAsyncFunction(fn) {\n    return Object.prototype.toString.call(fn).includes(\"AsyncFunction\");\n}\n","import { isFunction } from \"../utils/utils\";\n\nfunction setup02Exercise(exercise02) {\n    if (isFunction(exercise02)) {\n        exercise02();\n    }\n}\n\nexport default setup02Exercise;\n","/**\n * Exercise 02:\n *\n * Finish the code of the `exercise02` function.\n *\n * The function will receive an object as a parameter with\n * the following shape:\n *\n * {\n *  firstName: \"Ana\",\n *  lastName: \"Marks\",\n * }\n *\n * 1. The function should destructure the keys from the parameter\n *    in the function definition so that it captures the\n *    `firstName` and `lastName` keys from the object\n *\n * @example\n * function hello({ message }) { ... }\n *\n * 2. Both destructured keys should have a default value of:\n *   firstName = \"Default firstName\"\n *   lastName = \"Default lastName\"\n *\n * @example\n * function hello({ message = \"default message\" }) { ... }\n *\n * 3. Returns the concatenation of the `firstName` and `lastName` variables\n *\n * @example\n *\n * {\n *  firstName: \"Ana\",\n *  lastName: \"Marks\",\n * }\n *\n * The `firstName` and `lastName` should be concatenated\n * with the following strings:\n *\n * => `Hello I am Ana Marks`\n */\n\n// Finish the code of the function\nfunction exercise02( {firstName = 'Default firstName', lastName = 'Default lastName'} ) {\n  return `Hello I am ${firstName} ${lastName}`\n}\n\n// Donâ€™t change the code bellow this line\nimport setup02Exercise from './02-exercise-setup'\n\nif (process.env.NODE_ENV !== 'test') {\n\tsetup02Exercise(() =>\n\t\tconsole.log(\n\t\t\texercise02({\n\t\t\t\tfirstName: 'John',\n\t\t\t\tlastName: 'Second',\n\t\t\t})\n\t\t)\n\t)\n\tsetup02Exercise(() => console.log(exercise02({})))\n}\n\nexport default exercise02\n"]}