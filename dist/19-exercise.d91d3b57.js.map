{"version":3,"sources":["src/utils/utils.js","src/19-exercise/19-exercise-setup.js","src/19-exercise/19-exercise.js"],"names":["isFunction","fn","isArrowFunction","isAsyncFunction","Object","prototype","toString","call","includes","setup19Exercise","exercise19","Person","ana","console","log"],"mappings":";;;;;;;ACAA,ACgCA;;AD9BA,ADFO,SCEES,ADFOT,UAAT,CAAoBC,EAApB,ECEP,ADF+B,CCENS,UAAzB,EAAqC;AACjC,ADFA,MCEI,GDFG,OAAOT,EAAP,KAAc,MCENS,IDFf,MCEI,CAAJ,EAA4B;AACxBA,ACJR,AFEC,ICEOA,UAAU;AACb;AACJ,ADFM,SAASR,eAAT,CAAyBD,EAAzB,EAA6B;AAChC,MAAIA,EAAJ;AACH,eCEcQ;;ADAR,SAASN,eAAT,CAAyBF,EAAzB,EAA6B;AAChC,SAAOG,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BN,EAA/B,EAAmCO,QAAnC,CAA4C,eAA5C,CAAP;AACH;;;;;;;;;AEQD;AACA,MAAMG,MAAN,CAAa,GAEb;AACA;AACA;AACA;AACA;AACA;;;;AACA,IAAIC,GAAG,GAAG,EAAV,EAEA;;;;AAKA,IAAI,kBAAyB,MAA7B,EAAqC;AACjC,8BAAgB,MAAMC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAtB;AACH","file":"19-exercise.d91d3b57.js","sourceRoot":"..","sourcesContent":["export function isFunction(fn) {\n    return typeof fn === \"function\";\n}\n\nexport function isArrowFunction(fn) {\n    new fn();\n}\n\nexport function isAsyncFunction(fn) {\n    return Object.prototype.toString.call(fn).includes(\"AsyncFunction\");\n}\n","import { isFunction } from \"../utils/utils\";\n\nfunction setup19Exercise(exercise19) {\n    if (isFunction(exercise19)) {\n        exercise19();\n    }\n}\n\nexport default setup19Exercise;\n","/**\n * Exercise 19:\n *\n * 1. Create a class named `Person` that takes in as parameters\n *\n *    firstName\n *    lastName\n *\n * 2. The class should use the constructor method to receive\n *    the parameters for when a new instance of the class\n *    is created.\n *\n * 3. Once you have created the Person class, you should\n *    create a new person using the `new Person(...)`\n *    expression. Then, you should store the newly created\n *    person in the `ana` variable.\n */\n\n// Create the Person class\nclass Person {}\n\n// Create a new instance of the class with the arguments:\n//\n// firstName: \"Ana\"\n// lastName: \"Spark\"\n//\n// Store the new instance in the `ana` variable\nlet ana = \"\";\n\n// Donâ€™t change the code bellow this line\nexport { Person, ana };\n\nimport setup19Exercise from \"./19-exercise-setup\";\n\nif (process.env.NODE_ENV !== \"test\") {\n    setup19Exercise(() => console.log(ana));\n}\n"]}