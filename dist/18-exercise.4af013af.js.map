{"version":3,"sources":["src/utils/utils.js","src/18-exercise/18-exercise-setup.js","src/18-exercise/18-exercise.js"],"names":["isFunction","fn","isArrowFunction","isAsyncFunction","Object","prototype","toString","call","includes","setup18Exercise","exercise18","response","fetch","data","json","displayContents","wrapper","document","querySelector","textContent","JSON","stringify"],"mappings":";;;;;;;ACAA,ACkCA;;ADhCA,ADFO,SCEES,ADFOT,UAAT,CAAoBC,EAApB,ECEP,ADF+B,CCENS,UAAzB,EAAqC;AACjC,ADFA,MCEI,GDFG,OAAOT,EAAP,KAAc,MCENS,IDFf,MCEI,CAAJ,EAA4B;AACxBA,ACJR,AFEC,ICEOA,UAAU;AACb;AACJ,ADFM,SAASR,eAAT,CAAyBD,EAAzB,EAA6B;AAChC,MAAIA,EAAJ;AACH,eCEcQ;;ADAR,SAASN,eAAT,CAAyBF,EAAzB,EAA6B;AAChC,SAAOG,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BN,EAA/B,EAAmCO,QAAnC,CAA4C,eAA5C,CAAP;AACH;;;;;;;;;;;AEUD;AACA,eAAeE,UAAf,GAA4B;AACxB,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8CAAD,CAA5B;AACA,QAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACAC,EAAAA,eAAe,CAACF,IAAD,CAAf;AACH,EAED;;;AACA,SAASE,eAAT,CAAyBF,IAAzB,EAA+B;AAC3B,QAAMG,OAAO,GAAGC,QAAQ,CAACC,aAAT,CAAuB,aAAvB,CAAhB;AAEAF,EAAAA,OAAO,CAACG,WAAR,GAAsBC,IAAI,CAACC,SAAL,CAAeR,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAAtB;AACH;;AAID,IAAI,kBAAyB,MAA7B,EAAqC;AACjC,8BAAgB,MAAMH,UAAU,EAAhC;AACH;;eAEcA","file":"18-exercise.4af013af.js","sourceRoot":"..","sourcesContent":["export function isFunction(fn) {\n    return typeof fn === \"function\";\n}\n\nexport function isArrowFunction(fn) {\n    new fn();\n}\n\nexport function isAsyncFunction(fn) {\n    return Object.prototype.toString.call(fn).includes(\"AsyncFunction\");\n}\n","import { isFunction } from \"../utils/utils\";\n\nfunction setup18Exercise(exercise18) {\n    if (isFunction(exercise18)) {\n        exercise18();\n    }\n}\n\nexport default setup18Exercise;\n","/**\n * Exercise 18:\n *\n * Complete the code of the exercise18 function so that it:\n *\n * 1. Converts the exercise18 function to be of type `async`\n *\n * 2. Uses the await keyword in front of a fetch() call\n *    to the following url:\n *\n *    https://jsonplaceholder.typicode.com/users/1\n *\n * 3. Uses the await keyword again in front of the json() call\n *    to wait for the data of the promise\n *\n * 4. Obtains the data from the fetch json() call and executes\n *    the `displayContents` function by passing it as an argument\n *    the response data returned by the fetch json() method.\n */\n\n// Finish the code of the function\nasync function exercise18() {\n    const response = await fetch('https://jsonplaceholder.typicode.com/users/1')\n    const data = await response.json()\n    displayContents(data)\n}\n\n// Donâ€™t change the code bellow this line\nfunction displayContents(data) {\n    const wrapper = document.querySelector(\".ex-wrapper\");\n\n    wrapper.textContent = JSON.stringify(data, null, 2);\n}\n\nimport setup18Exercise from \"./18-exercise-setup\";\n\nif (process.env.NODE_ENV !== \"test\") {\n    setup18Exercise(() => exercise18());\n}\n\nexport default exercise18;\n"]}