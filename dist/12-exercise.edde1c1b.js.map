{"version":3,"sources":["src/utils/utils.js","src/12-exercise/12-exercise-setup.js","src/12-exercise/12-exercise.js"],"names":["isFunction","fn","isArrowFunction","isAsyncFunction","Object","prototype","toString","call","includes","setup12Exercise","exercise12","console","log"],"mappings":";;;;;;;ACAA,ACqBA;;ADnBA,ADFO,SCEES,ADFOT,UAAT,CAAoBC,EAApB,ECEP,ADF+B,CCENS,UAAzB,EAAqC;AACjC,ADFA,MCEI,GDFG,OAAOT,EAAP,KAAc,MCENS,IDFf,MCEI,CAAJ,EAA4B;AACxBA,ACJR,AFEC,ICEOA,UAAU;AACb;AACJ,ADFM,SAASR,eAAT,CAAyBD,EAAzB,EAA6B;AAChC,MAAIA,EAAJ;AACH,eCEcQ;;ADAR,SAASN,eAAT,CAAyBF,EAAzB,EAA6B;AAChC,SAAOG,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BN,EAA/B,EAAmCO,QAAnC,CAA4C,eAA5C,CAAP;AACH;;;;;;;;AEOD;AACA,SAASE,UAAT,GAAsB,CAAE,EAExB;;;AAGA,IAAI,kBAAyB,MAA7B,EAAqC;AACjC,8BAAgB,MACZC,OAAO,CAACC,GAAR,CACIF,UAAU,CACN,CAAC,QAAD,EAAW,SAAX,EAAsB,WAAtB,EAAmC,UAAnC,EAA+C,QAA/C,CADM,EAEN,gBAFM,CADd,CADJ;AAQH;;eAEcA","file":"12-exercise.edde1c1b.js","sourceRoot":"..","sourcesContent":["export function isFunction(fn) {\n    return typeof fn === \"function\";\n}\n\nexport function isArrowFunction(fn) {\n    new fn();\n}\n\nexport function isAsyncFunction(fn) {\n    return Object.prototype.toString.call(fn).includes(\"AsyncFunction\");\n}\n","import { isFunction } from \"../utils/utils\";\n\nfunction setup12Exercise(exercise12) {\n    if (isFunction(exercise12)) {\n        exercise12();\n    }\n}\n\nexport default setup12Exercise;\n","/**\n * Exercise 12:\n *\n * Finish the code of the `exercise12` function so that it:\n *\n * 1. Receives 2 parameters: `array` and `entry`\n *\n * @example\n *\n * function fn (array, entry) {...}\n *\n * 2. Executes the array.includes() method to check if the `entry`\n *    is in the `array` parameter that the function receives.\n *\n * 3. Returns the result\n */\n\n// Finish the code of the function\nfunction exercise12() {}\n\n// Donâ€™t change the code bellow this line\nimport setup12Exercise from \"./12-exercise-setup\";\n\nif (process.env.NODE_ENV !== \"test\") {\n    setup12Exercise(() =>\n        console.log(\n            exercise12(\n                [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"],\n                \"SOME OTHER DAY\"\n            )\n        )\n    );\n}\n\nexport default exercise12;\n"]}