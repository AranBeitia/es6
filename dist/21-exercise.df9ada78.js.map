{"version":3,"sources":["src/utils/utils.js","src/21-exercise/21-exercise-setup.js","src/21-exercise/21-exercise.js"],"names":["isFunction","fn","isArrowFunction","isAsyncFunction","Object","prototype","toString","call","includes","setup21Exercise","exercise21","Person","Employee","ana","console","log","sayName","getJobTitle"],"mappings":";;;;;;;ACAA,AC6DA;;AD3DA,ADFO,SCEES,ADFOT,UAAT,CAAoBC,EAApB,ECEP,ADF+B,CCENS,UAAzB,EAAqC;AACjC,ADFA,MCEI,GDFG,OAAOT,EAAP,KAAc,MCENS,IDFf,MCEI,CAAJ,EAA4B;AACxBA,ACJR,AFEC,ICEOA,UAAU;AACb;AACJ,ADFM,SAASR,eAAT,CAAyBD,EAAzB,EAA6B;AAChC,MAAIA,EAAJ;AACH,eCEcQ;;ADAR,SAASN,eAAT,CAAyBF,EAAzB,EAA6B;AAChC,SAAOG,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BN,EAA/B,EAAmCO,QAAnC,CAA4C,eAA5C,CAAP;AACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEiCD;AACA,MAAMG,MAAN,CAAa,GAEb;;;;;AACA,MAAMC,QAAN,CAAe,GAEf;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA,MAAMC,GAAG,GAAG,EAAZ,EAEA;;;;AAKA,IAAI,kBAAyB,MAA7B,EAAqC;AACjC,8BAAgB,MAAMC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAtB;AACA,8BAAgB,MAAMC,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,OAAJ,EAAZ,CAAtB;AACA,8BAAgB,MAAMF,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACI,WAAJ,EAAZ,CAAtB;AACH","file":"21-exercise.df9ada78.js","sourceRoot":"..","sourcesContent":["export function isFunction(fn) {\n    return typeof fn === \"function\";\n}\n\nexport function isArrowFunction(fn) {\n    new fn();\n}\n\nexport function isAsyncFunction(fn) {\n    return Object.prototype.toString.call(fn).includes(\"AsyncFunction\");\n}\n","import { isFunction } from \"../utils/utils\";\n\nfunction setup21Exercise(exercise21) {\n    if (isFunction(exercise21)) {\n        exercise21();\n    }\n}\n\nexport default setup21Exercise;\n","/**\n * Exercise 21:\n *\n * 1. Create a class named `Person` that takes in as parameters\n *\n *    firstName\n *    lastName\n *\n * 2. The class should use the constructor method to receive\n *    the parameters for when a new instance of the class\n *    is created.\n *\n * 3. Once you have created the Person class, you should\n *    create a new person using the `new Person(...)`\n *    expression. Then, you should store the newly created\n *    person in the `ana` variable.\n *\n * 4. The class should also have a method named `sayName`\n *    that returns the concatenation of the firstName and lastName\n *    with an empty space in between.\n *\n *    @example\n *\n *    \"Alex Marks\"\n *\n * 5. Create a class named `Employee` that takes in as parameters\n *\n *    firstName\n *    lastName\n *    jobTitle\n *\n * 6. The `Employee` class should extend the `Person` class and use the\n *    `super()` method call to pass the `firstName` and `lastName`\n *     to the `Person` parent class.\n *\n * 7. The `Employee` class should declare inside the constructor\n *    the `jobTitle` property as it’s own besides the ones passed\n *    to the super() call.\n *\n * 8. The `Employee` class should also declare a method named `getJobTitle`\n *    that returns the `jobTitle` of the `Employee`\n */\n\n// Create the Person class\nclass Person {}\n\n// Create the Employee class that extends the Person class\nclass Employee {}\n\n// Create a new instance of the `Employee` class with the arguments:\n//\n// firstName: \"Ana\"\n// lastName: \"Spark\"\n// jobTitle: \"Developer\"\n//\n// Store the new instance in the `ana` variable\nconst ana = \"\";\n\n// Don’t change the code bellow this line\nexport { Person, Employee, ana };\n\nimport setup21Exercise from \"./21-exercise-setup\";\n\nif (process.env.NODE_ENV !== \"test\") {\n    setup21Exercise(() => console.log(ana));\n    setup21Exercise(() => console.log(ana.sayName()));\n    setup21Exercise(() => console.log(ana.getJobTitle()));\n}\n"]}