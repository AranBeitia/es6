{"version":3,"sources":["src/utils/utils.js","src/03-exercise/03-exercise-setup.js","src/03-exercise/03-exercise.js"],"names":["isFunction","fn","isArrowFunction","isAsyncFunction","Object","prototype","toString","call","includes","setup03Exercise","exercise03","a","b","rest","console","log"],"mappings":";;;;;;;ACAA,ACgCA;;AD9BA,ADFO,SCEES,ADFOT,UAAT,CAAoBC,EAApB,ECEP,ADF+B,CCENS,UAAzB,EAAqC;AACjC,ADFA,MCEI,GDFG,OAAOT,EAAP,KAAc,MCENS,IDFf,MCEI,CAAJ,EAA4B;AACxBA,ACJR,AFEC,ICEOA,UAAU;AACb;AACJ,ADFM,SAASR,eAAT,CAAyBD,EAAzB,EAA6B;AAChC,MAAIA,EAAJ;AACH,eCEcQ;;ADAR,SAASN,eAAT,CAAyBF,EAAzB,EAA6B;AAChC,SAAOG,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BN,EAA/B,EAAmCO,QAAnC,CAA4C,eAA5C,CAAP;AACH;;;;;;;;;;;;;;;;;AEgBD;AACA,MAAME,UAAU,GAAG,SAAbA,UAAa,CAACC,CAAD,EAAIC,CAAJ,EAAmB;AAAA,oCAATC,IAAS;AAATA,IAAAA,IAAS;AAAA;;AAClC,SAAOA,IAAP;AACH,CAFD,EAIA;;;AAGA,IAAI,kBAAyB,MAA7B,EAAqC;AACjC,8BAAgB,MACZC,OAAO,CAACC,GAAR,CACIL,UAAU,CAAC,QAAD,EAAW,SAAX,EAAsB,WAAtB,EAAmC,UAAnC,EAA+C,QAA/C,CADd,CADJ;AAKH;;eAEcA","file":"03-exercise.7104b5e4.js","sourceRoot":"..","sourcesContent":["export function isFunction(fn) {\n    return typeof fn === \"function\";\n}\n\nexport function isArrowFunction(fn) {\n    new fn();\n}\n\nexport function isAsyncFunction(fn) {\n    return Object.prototype.toString.call(fn).includes(\"AsyncFunction\");\n}\n","import { isFunction } from \"../utils/utils\";\n\nfunction setup03Exercise(exercise03) {\n    if (isFunction(exercise03)) {\n        exercise03();\n    }\n}\n\nexport default setup03Exercise;\n","/**\n * Exercise 03:\n *\n * Finish the code of the `exercise03` function.\n *\n * The function will be called with several parameters with\n * the following shape:\n *\n * exercise03(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\")\n *\n * 1. The function should capture the first 2 elements and\n *    all the other ones in a an array using the `...rest` syntax\n *    which will create an array with all the remaining parameters\n *\n * @example\n * function hello(a, b, ...rest) { ... }\n *\n * 2. Return the array of the remaining parameters\n *\n * @example\n *\n * exercise03(1, 2, 3, 4, 5, 6)\n *\n * => [3, 4, 5, 6]\n */\n\n// Finish the code of the function\nconst exercise03 = (a, b, ...rest) => {\n    return rest\n}\n\n// Donâ€™t change the code bellow this line\nimport setup03Exercise from \"./03-exercise-setup\";\n\nif (process.env.NODE_ENV !== \"test\") {\n    setup03Exercise(() =>\n        console.log(\n            exercise03(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\")\n        )\n    );\n}\n\nexport default exercise03;\n"]}